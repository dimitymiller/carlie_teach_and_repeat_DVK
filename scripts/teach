#!/usr/bin/env python

### IMPORT CLASSES ###
import os
import sys
import rospy
import shutil
import cv2 as cv
from cv_bridge import CvBridge

import teach_repeat.transform_tools as transform_tools
from teach_repeat.teach_repeat_common import *

### IMPORT MESSAGE TYPES ###
from sensor_msgs.msg import Joy
from sensor_msgs.msg import Image
from geometry_msgs.msg import Pose
from nav_msgs.msg import Odometry

# IMPORT GAMEPAD DICTIONARIES FROM CARLIE_BASE
from carlie_base.gamepad_dictionaries import *

# # In order to import OpenCV when using Python 3, need to remove ROS python2.7 dist packages.
# if sys.version_info[0] == 3 and '/opt/ros/kinetic/lib/python2.7/dist-packages' in sys.path:
#     sys.path.remove('/opt/ros/kinetic/lib/python2.7/dist-packages') # so can import opencv for python3, silly ROS
# import cv2 as cv


### TEACH NODE CLASS ###
class TeachNode():

    # INITIALISATION
    def __init__(self):
        # VARIABLES
        self.update_visualisation = False
        self.frame_id = 0
        self.previous_odom = None # odometry pose of previous frame
        self.current_odom = None # odometry pose of current frame
        self.first_frame_odom = None # odometry of first frame
        self.odom_topic_recieved = False
        self.recording = 0
        self.prev_b_button_state = False

        # ROS INIT NODE
        rospy.init_node('teach_node')
        rospy.loginfo("Teach Node Initialised")

        # Constants
        self.KEYFRAME_DISTANCE_THRESHOLD = rospy.get_param('~keyframe_distance_threshold', 0.25)
        self.SAVE_IMAGE_RESIZE = (rospy.get_param('~save_image_resize_x', 640), rospy.get_param('~save_image_resize_y', 480))
        self.BASE_PATH = rospy.get_param('~base_path', '/home/nvidia/Documents')
        self.ROUTE_NAME = rospy.get_param('~route_name', 'route_1')
        self.VISUALISATION_ON = rospy.get_param('~visualisation_on', True)
        self.USE_GAMEPAD_FOR_RECORDING_SIGNAL = rospy.get_param('~use_gamepad_for_recording_signal', True)
        self.CV_BRIDGE = CvBridge()

        # Setup save directory and dataset file
        self.save_path = os.path.join(self.BASE_PATH, self.ROUTE_NAME)
        if os.path.exists(self.save_path):
            shutil.rmtree(self.save_path) # will delete existing save_path directory and its contents
        os.makedirs(self.save_path)

        self.dataset_file = open(os.path.join(self.save_path, 'dataset.txt'), 'w')
        self.dataset_file.write("Frame_ID, relative_odom_x(m), relative_odom_y(m), relative_odom_yaw(rad), relative_pose_x(m), relative_pose_y(m), relative_pose_yaw(rad)\n")

        # ROS Subcribers
        self.joy_subscriber = rospy.Subscriber("joy", Joy, self.JoyData_Callback)
        self.odom_subscriber = rospy.Subscriber('odom', Odometry, self.Odom_Callback)
        self.image_subscriber = rospy.Subscriber('image_raw', Image, self.Image_Callback)

        # CREATE OPENCV WINDOWS
        if self.VISUALISATION_ON:
            cv.namedWindow('Frame', cv.WINDOW_NORMAL)

        # ROS Spin
        if self.USE_GAMEPAD_FOR_RECORDING_SIGNAL:
            rospy.loginfo('Press B on the Gamepad to Start Recording.')

        while not rospy.is_shutdown():
            if self.update_visualisation and self.VISUALISATION_ON:
                teach_img = cv.imread(os.path.join(self.save_path, 'frame_%06d.png'%(self.frame_id-1)))
                cv.imshow('Frame', self.current_image)
                cv.waitKey(1)
                self.update_visualisation = False

            if self.recording == 2:
                rospy.signal_shutdown('teach recording completed')

     # GAMEPAD SUBCRIBER CALLBACK
    def JoyData_Callback(self, data):
        b_button_state = data.buttons[BUTTONS_DICT["B"]]

        if b_button_state != self.prev_b_button_state:
            # change of state
            self.prev_b_button_state = b_button_state
            if b_button_state == True: # pressed
                self.recording += 1
                # self.recording = not self.recording # change recording state
                if self.recording == 1:
                    rospy.loginfo('Teach Path Recording Started')
                elif self.recording == 2:
                    rospy.loginfo('Teach Path Recording Stopped')

                # # do some stuff if recording has changed
                # if self.recording:
                #     # delete any old route data and recreate folder
                #     if os.path.exists(self.save_path):
                #         shutil.rmtree(self.save_path) # will delete existing save_path directory and its contents
                #     os.makedirs(self.save_path)

                #     # reset frame_id, open dataset file and write header
                #     self.frame_id = 0
                #     self.dataset_file = open(os.path.join(self.save_path, 'dataset.txt'), 'w')
                #     self.dataset_file.write("Frame_ID, relative_odom_x(m), relative_odom_y(m), relative_odom_yaw(rad), relative_pose_x(m), relative_pose_y(m), relative_pose_yaw(rad)\n")
                # else:
                #     self.dataset_file.close() # close dataset file

    # ODOM CALLBACK
    def Odom_Callback(self, data):
        self.odom_topic_recieved = True
        self.current_odom = data.pose.pose

    # IMAGE CALLBACK
    def Image_Callback(self, data):
        # Wait until recording is true, if gamepad is been used to start/stop recording
        if self.USE_GAMEPAD_FOR_RECORDING_SIGNAL and self.recording != 1:
            return

        # Only start process images once odom callback has run once
        if not self.odom_topic_recieved:
            rospy.loginfo('Waiting until odometry data is received. Make sure topic is published and topic name is correct.')
            return

        # Set first frame and previous odom if frame_id is 0
        if self.frame_id == 0:
            self.previous_odom = self.current_odom
            self.first_frame_odom = self.current_odom

        # Calculate relative odom from previous frame, and 
        # Calculate pose of current frame within the first image coordinate frame 
        # return type is a transformation matrix (4x4 numpy array)
        relative_odom_trans = CalculateTransformBetweenPoseMessages(self.current_odom, self.previous_odom)
        relative_pose_trans = CalculateTransformBetweenPoseMessages(self.current_odom, self.first_frame_odom)
        if relative_odom_trans.size == 0: # check to see if
            rospy.logwarn('Unable to get relative odom transform. Make sure topic is published and topic name is correct.')
            return # safeguard, need the relative odom for the teach

        if self.frame_id >= 1 and transform_tools.distance_of_trans(relative_odom_trans) < self.KEYFRAME_DISTANCE_THRESHOLD:
            return
            
        # Attempt to convert ROS image into CV data type (i.e. numpy array)
        try:
            img_bgr = self.CV_BRIDGE.imgmsg_to_cv2(data, "bgr8")
            self.current_image = img_bgr.copy() # used for visualisation
        except Exception as e:
            rospy.logerr("Unable to convert ROS image into CV data. Error: " + str(e))
            return

        # Save data to dataset file
        retval = WriteDataToDatasetFile(img_bgr, self.frame_id, self.save_path, relative_odom_trans, relative_pose_trans, self.dataset_file, {'SAVE_IMAGE_RESIZE': self.SAVE_IMAGE_RESIZE})
        if retval == -1:
            rospy.logwarn("Was unable to save repeat image (ID = %d)"%(self.frame_id) + ". Error: " + str(e))
            return # safeguard do not want to increase frame id or previous odom
        
        rospy.loginfo('Saved teach frame (ID = %d)'%(self.frame_id))

        # Update frame ID, previous odom and update visualisation variables
        self.frame_id += 1
        self.previous_odom = self.current_odom
        self.update_visualisation = True

    # # IMAGE CALLBACK
    # def Depth_Callback(self, data):
    #     # Wait until recording is true, if gamepad is been used to start/stop recording
    #     if self.USE_GAMEPAD_FOR_RECORDING_SIGNAL and self.recording != 1:
    #         return

    #     # Only start process images once odom callback has run once
    #     if not self.odom_topic_recieved:
    #         rospy.loginfo('Waiting until odometry data is received. Make sure topic is published and topic name is correct.')
    #         return

    #     # Set first frame and previous odom if frame_id is 0
    #     if self.frame_id == 0:
    #         self.previous_odom = self.current_odom
    #         self.first_frame_odom = self.current_odom

    #     # Calculate relative odom from previous frame, and 
    #     # Calculate pose of current frame within the first image coordinate frame 
    #     # return type is a transformation matrix (4x4 numpy array)
    #     relative_odom_trans = CalculateTransformBetweenPoseMessages(self.current_odom, self.previous_odom)
    #     relative_pose_trans = CalculateTransformBetweenPoseMessages(self.current_odom, self.first_frame_odom)
    #     if relative_odom_trans.size == 0: # check to see if
    #         rospy.logwarn('Unable to get relative odom transform. Make sure topic is published and topic name is correct.')
    #         return # safeguard, need the relative odom for the teach

    #     if self.frame_id >= 1 and transform_tools.distance_of_trans(relative_odom_trans) < self.KEYFRAME_DISTANCE_THRESHOLD:
    #         return
            
    #     # Attempt to convert ROS image into CV data type (i.e. numpy array)
    #     try:
    #         img_bgr = self.CV_BRIDGE.imgmsg_to_cv2(data, "bgr8")
    #         self.current_image = img_bgr.copy() # used for visualisation
    #     except Exception as e:
    #         rospy.logerr("Unable to convert ROS image into CV data. Error: " + str(e))
    #         return

    #     # Save data to dataset file
    #     retval = WriteDataToDatasetFile(img_bgr, self.frame_id, self.save_path, relative_odom_trans, relative_pose_trans, self.dataset_file, {'SAVE_IMAGE_RESIZE': self.SAVE_IMAGE_RESIZE})
    #     if retval == -1:
    #         rospy.logwarn("Was unable to save repeat image (ID = %d)"%(self.frame_id) + ". Error: " + str(e))
    #         return # safeguard do not want to increase frame id or previous odom
        
    #     rospy.loginfo('Saved teach frame (ID = %d)'%(self.frame_id))

    #     # Update frame ID, previous odom and update visualisation variables
    #     self.frame_id += 1
    #     self.previous_odom = self.current_odom
    #     self.update_visualisation = True


### MAIN ####
if __name__ == "__main__":
    try:
        teach = TeachNode()
    except rospy.ROSInterruptException:
        teach.dataset_file.close()

    teach.dataset_file.close()
